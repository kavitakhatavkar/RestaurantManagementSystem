I. Calculate Aggregated Revenue
    Problem Statement:
        You are building a Restaurant Management System. As a part of this system, you need to build a functionality using which users with billing privileges can generate aggregated revenue report for the restaurant.
    Requirements:
        i.   The revenue made by the restaurant is stored in the database in daily_revenue table.
             - This table has aggregated data for each day.
             - This table contains 4 columns:
                id (primary key)
                date (date on which the revenue was generated)
                revenueFromFoodSales (revenue generated from food sales)
                totalGst (total GST collected)
                totalServiceCharge (total service charge collected)
        ii.  Our functionality should support 4 types of queries:
             - Get revenue for current month
             - Get revenue for current financial year
             - Get revenue for previous month
             - Get revenue for previous financial year
        iii. The request for calculating revenue will contain user id and query type.
        iv.  Depending upon the type of query the functionality should aggregate the relevant revenue data and return the response.
        v.   This functionality will only available to users with billing privileges.
    Instructions:
        - Refer the calculateRevenue method inside RevenueController class.
        - Refer the CalculateRevenueRequestDto and CalculateRevenueResponseDto for understanding the expected input and output to the functionality.
        - Refer the models package to understand the models.
        - Implement the RevenueService, UserRepository and DailyRevenueRepository interfaces to achieve the above requirements.
        - We need in memory database implementation for this assignment.
        - Refer the TestRevenueController class to understand the test cases that will be used to evaluate your solution.
        - Do not modify existing methods and their parameters for interfaces, feel free to add more methods if required.
II. Generate Bill
    Problem Statement:
        You are building a Restaurant Management System. As a part of this system, you need to build a functionality using which customers can generate a bill for their orders.
    Requirements:
        i.   Generally a customer places multiple orders before requesting for the bill. Hence, our system must be able to track orders placed by a customer.
                - We should have an entity called as CustomerSession in our system which will help us track the orders placed by a customer.
                - Once the customer places their 1st order, we should create a CustomerSession for them with status as ACTIVE.
                - All the subsequent orders placed by the customer should be associated with the CustomerSession created for them.
                - Once the customer requests for the bill, we should mark the CustomerSession as ENDED.
        ii.  The request for generating the bill will contain just the customer id.
        iii. This functionality should aggregate the items ordered by the customer and calculate the total amount to be paid by the customer.
        iv.  This functionality should also calculate GST and service charge on the total amount.
        v.   GST will be 5% of the total food cost and service charge will be 10% of the total food cost.
        vi.  Return the bill details in the response.
    Instructions:
        - Refer the generateBill method inside OrderController class.
        - Refer the GenerateBillRequestDto and GenerateBillResponseDto for understanding the expected input and output to the functionality.
        - Refer the models package to understand the models.
        - Implement the OrderService, CustomerSessionRepository and OrderRepository interfaces to achieve the above requirements.
        - We need in memory database implementation for this assignment.
        - Refer the TestOrderController class to understand the test cases that will be used to evaluate your solution.
        - Do not modify existing methods and their parameters for interfaces, feel free to add more methods if required.
III. Track Orders
    Problem Statement:
        You are building a Restaurant Management System. As a part of this system, you need to build a functionality using which orders placed by a customer can be tracked.
    Requirements:
        i.   Generally a customer places multiple orders before requesting for the bill. Hence, our system must be able to track orders placed by a customer.
                - We should have an entity called as CustomerSession in our system which will help us track the orders placed by a customer.
                - Once the customer places their 1st order, we should create a CustomerSession for them with status as ACTIVE.
                - All the subsequent orders placed by the customer should be associated with the CustomerSession created for them.
        ii.  The request for placing an order will contain the user id of the customer and a Map, where the key will be menu item id and value is the quantity of the menu item ordered.
        iii. This functionality should store the order details in the database.
        iv.  If the order is placed for a customer who is not present in the database, then we should throw an error.
        v.   If an order contains a menu item which is not present in the database, then we should throw an error.
        vi.  Return the order details in the response.
    Instructions:
        - Refer the placeOrder method inside OrderController class.
        - Refer the PlaceOrderRequestDto and PlaceOrderResponseDto for understanding the expected input and output to the functionality.
        - Refer the models package to understand the models.
        - Implement the OrderService, CustomerSessionRepository, UserRepository, MenuItemRepository and OrderRepository interfaces to achieve the above requirements.
        - We need in memory database implementation for this assignment.
        - Refer the TestOrderController class to understand the test cases that will be used to evaluate your solution.
        - Do not modify existing methods and their parameters for interfaces, feel free to add more methods if required.